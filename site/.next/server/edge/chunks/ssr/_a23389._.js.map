{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/services/authService.ts"],"sourcesContent":["const serviceAddress = `${process.env.SERVER_URL}authservice/`;\r\n\r\nconst AuthService = {\r\n    async login(username: string, password: string) {\r\n        const response = await fetch(`${serviceAddress}verify-password`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username, password }),\r\n        });\r\n\r\n        if (response.status === 400) {\r\n            throw new Error('Wrong password or login.');\r\n        }\r\n\r\n        if (response.status >= 500) {\r\n            throw new Error('Server error. Please try again later.');\r\n        }\r\n\r\n        if (!response.ok) {\r\n            throw new Error('An unknown error occured.');\r\n        }\r\n\r\n        return await response.json();\r\n    },\r\n};\r\n\r\nexport default AuthService;"],"names":[],"mappings":";;;AAAA,MAAM,iBAAiB,CAAC,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC;AAE9D,MAAM,cAAc;IAChB,MAAM,OAAM,QAAgB,EAAE,QAAgB;QAC1C,MAAM,WAAW,MAAM,MAAM,CAAC,EAAE,eAAe,eAAe,CAAC,EAAE;YAC7D,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAU;YAAS;QAC9C;QAEA,IAAI,SAAS,MAAM,KAAK,KAAK;YACzB,MAAM,IAAI,MAAM;QACpB;QAEA,IAAI,SAAS,MAAM,IAAI,KAAK;YACxB,MAAM,IAAI,MAAM;QACpB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO,MAAM,SAAS,IAAI;IAC9B;AACJ;uCAEe"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport Google from \"next-auth/providers/google\"\r\nimport Credentials from \"next-auth/providers/credentials\"\r\nimport type { Provider } from \"next-auth/providers\"\r\nimport AuthService from \"@/services/authService\"\r\n\r\nconst SERVER_URL = process.env.SERVER_URL + \"auth/verify-password\";\r\n\r\nconst providers: Provider[] = [\r\n  Credentials({\r\n    credentials: {\r\n      userName: { label: \"Username\", type: \"text\" },\r\n      password: { label: \"Password\", type: \"password\" }\r\n    },\r\n    async authorize(credentials) {\r\n      if (!credentials || typeof credentials.userName !== 'string' || typeof credentials.password !== 'string') {\r\n        return null;\r\n      }\r\n\r\n      try {\r\n        const user = await AuthService.login(credentials.userName, credentials.password);\r\n\r\n        if (user) {\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            token: user.token\r\n          };\r\n        } else {\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error('Authorize error:', error);\r\n        return null;\r\n      }\r\n    }\r\n  }),\r\n  Google,\r\n]\r\n\r\nexport const providerMap = providers\r\n  .map((provider) => {\r\n    if (typeof provider === \"function\") {\r\n      const providerData = provider()\r\n      return { id: providerData.id, name: providerData.name }\r\n    } else {\r\n      return { id: provider.id, name: provider.name }\r\n    }\r\n  })\r\n  .filter((provider) => provider.id !== \"credentials\")\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers,\r\n  callbacks: {\r\n    async redirect({ baseUrl }) {\r\n      return baseUrl;\r\n    }\r\n  },\r\n  pages: {\r\n    signIn: '/login',\r\n    signOut: '/login',\r\n  }\r\n})"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAMA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,GAAG;AAE5C,MAAM,YAAwB;IAC5B,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;QACV,aAAa;YACX,UAAU;gBAAE,OAAO;gBAAY,MAAM;YAAO;YAC5C,UAAU;gBAAE,OAAO;gBAAY,MAAM;YAAW;QAClD;QACA,MAAM,WAAU,WAAW;YACzB,IAAI,CAAC,eAAe,OAAO,YAAY,QAAQ,KAAK,YAAY,OAAO,YAAY,QAAQ,KAAK,UAAU;gBACxG,OAAO;YACT;YAEA,IAAI;gBACF,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAW,CAAC,KAAK,CAAC,YAAY,QAAQ,EAAE,YAAY,QAAQ;gBAE/E,IAAI,MAAM;oBACR,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,KAAK;oBACnB;gBACF,OAAO;oBACL,OAAO;gBACT;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,oBAAoB;gBAClC,OAAO;YACT;QACF;IACF;IACA,qJAAA,CAAA,UAAM;CACP;AAEM,MAAM,cAAc,UACxB,GAAG,CAAC,CAAC;IACJ,IAAI,OAAO,aAAa,YAAY;QAClC,MAAM,eAAe;QACrB,OAAO;YAAE,IAAI,aAAa,EAAE;YAAE,MAAM,aAAa,IAAI;QAAC;IACxD,OAAO;QACL,OAAO;YAAE,IAAI,SAAS,EAAE;YAAE,MAAM,SAAS,IAAI;QAAC;IAChD;AACF,GACC,MAAM,CAAC,CAAC,WAAa,SAAS,EAAE,KAAK;AAEjC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D;IACA,WAAW;QACT,MAAM,UAAS,EAAE,OAAO,EAAE;YACxB,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,SAAS;IACX;AACF"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}