syntax = "proto3";

option csharp_namespace = "ChatProto";

package ChatProto.v1;
import "google/protobuf/empty.proto";
// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}

service Conversation {
    // Get conversation by task ID
    rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);

    // Create a new conversation
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);

    // Update an existing conversation
    rpc UpdateConversation(UpdateConversationRequest) returns (google.protobuf.Empty);

    // Cancel a conversation
    //rpc CancelConversation(CancelConversationRequest) returns (google.protobuf.Empty);
}

service MessageProto {
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
    rpc CreateMessage(CreateMessageRequest) returns (CreateMessageResponse);
    //rpc UpdateMessage(UpdateMessageRequest) returns (google.protobuf.Empty);
    rpc DeleteMessage(DeleteMessageRequest) returns (google.protobuf.Empty);
    //rpc AddReaction(AddReactionRequest) returns (google.protobuf.Empty);
    //rpc RemoveReactionMessage(RemoveReactionRequest) returns (google.protobuf.Empty);
}

//Models
// Request message for getting a conversation
message GetConversationRequest {
    int32 taskId = 1;
}

// Response message for getting a conversation (as a list)
message GetConversationResponse {
    repeated ConversationModel conversations = 1; // List of conversations
}

// Request message for creating a conversation
message CreateConversationRequest {
    int32 taskId = 1;
    string title = 2;
    string description = 3;
}

// Response message for creating a conversation
message CreateConversationResponse {
    int32 id = 1;
}

// Request message for updating a conversation
message UpdateConversationRequest {
    int32 id = 1;
    string title = 2;
    string description = 3;
}

// Conversation message representing each conversation entry
message ConversationModel {
    int32 id = 1;
    string title = 2;
    string description = 3;
    string createdDate = 4;
}

// Request message for canceling a conversation
message CancelConversationRequest {
    int32 id = 1;
}

//Messages request
message GetMessagesRequest {
    int32 ConversationId = 1;
}
message CreateMessageRequest {
    int32 ConversationId = 1;
    int32 ReplyToMessageId = 2;
    int32 UserId = 3;
    int32 TypeId = 4;
    string Text = 5;
}

message DeleteMessageRequest {
    int32 Id = 1;
}

//Messages response
message MessageItem{
    int32 Id = 1;
    int32 ReplyToMessageId = 2;
    int32 UserId = 3;
    int32 TypeId = 4;
    string Text = 5;
}
message GetMessagesResponse {
 repeated MessageItem messages = 1;
}

message CreateMessageResponse {
    int32 id = 1;
}